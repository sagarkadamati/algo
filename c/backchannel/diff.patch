diff --git a/c/backchannel/src/bc_cmd_tracker.c b/c/backchannel/src/bc_cmd_tracker.c
index fcd9cb6..f866db8 100644
--- a/c/backchannel/src/bc_cmd_tracker.c
+++ b/c/backchannel/src/bc_cmd_tracker.c
@@ -10,7 +10,7 @@ void bc_update_cmd_data(struct cmds *cmds, int index)
 	timespec_diff(&cmds->cmd[index].tenter,
 			&cmds->cmd[index].texit, &spec);
 
-	bc_update_tracker(cmds->mblock, (index),
+	bc_update_tracker(cmds->mblock, index,
 		"\n| %-50s | %4lu.%09lu | %5d | %5d |",
 		cmds->cmd[index].name,
 		spec.tv_sec, spec.tv_nsec,
@@ -81,8 +81,8 @@ struct cmds* bc_allocate_cmds(tracker *t)
 
 void bc_deallocate_cmds(struct cmds *cmds)
 {
-	if(cmds->mblock)
-		bc_deallocate_mblock(cmds->mblock);
+	// if(cmds->mblock)
+	// 	bc_deallocate_mblock(cmds->mblock);
 
 	if(cmds->cmd)
 		bc_free(cmds->cmd);
diff --git a/c/backchannel/src/bc_heap_tracker.h b/c/backchannel/src/bc_heap_tracker.h
index 9f5fd15..3293009 100644
--- a/c/backchannel/src/bc_heap_tracker.h
+++ b/c/backchannel/src/bc_heap_tracker.h
@@ -5,7 +5,7 @@
 #include "bc_tracker.h"
 
 #define HEAP_TRACKER        "bc_heap"
-#define HEAP_SIZE           3
+#define HEAP_SIZE           4
 
 enum alloc_type {
 	MALLOC,
diff --git a/c/backchannel/src/bc_init.c b/c/backchannel/src/bc_init.c
index 0344694..963d9f5 100644
--- a/c/backchannel/src/bc_init.c
+++ b/c/backchannel/src/bc_init.c
@@ -8,6 +8,7 @@ void
 	bc_init_heap_tracker();
 
 	bc_init_cmd_tracker();
+	bc_init_stream_tracker();
 	bc_init_ioctl_tracker();
 	bc_init_function_tracker();
 }
@@ -18,6 +19,7 @@ void
 {
 	bc_deinit_function_tracker();
 	bc_deinit_ioctl_tracker();
+	bc_deinit_stream_tracker();
 	bc_deinit_cmd_tracker();
 
 	bc_deinit_heap_tracker();
diff --git a/c/backchannel/src/bc_init.h b/c/backchannel/src/bc_init.h
index 171530e..4e9d2a5 100644
--- a/c/backchannel/src/bc_init.h
+++ b/c/backchannel/src/bc_init.h
@@ -8,6 +8,7 @@
 #include "bc_ioctl_tracker.h"
 #include "bc_function_tracker.h"
 #include "bc_cmd_tracker.h"
+#include "bc_stream_tracker.h"
 
 void bc_init(void);
 void bc_deinit(void);
diff --git a/c/backchannel/src/bc_stream_tracker.c b/c/backchannel/src/bc_stream_tracker.c
index 3ec9745..013b08f 100644
--- a/c/backchannel/src/bc_stream_tracker.c
+++ b/c/backchannel/src/bc_stream_tracker.c
@@ -22,7 +22,7 @@ void bc_update_stream_header(int sid)
 		"----------""----","-----");
 }
 
-void bc_update_stream_data(int sid)
+void bc_update_stream_data(int sid, int index)
 {
 	struct timespec spec;
 	char * type;
@@ -42,7 +42,7 @@ void bc_update_stream_data(int sid)
 
 	timespec_diff(&stream_tracker.stream[sid].data->trequest,
 			&stream_tracker.stream[sid].data->tdone, &spec);
-	bc_update_tracker(stream_tracker.stream[sid].mblock, 0,
+	bc_update_tracker(stream_tracker.stream[sid].mblock, index,
 			"\n| %-5s%-10d | %-5s%-10d | %-6s%-10s |  %4lu.%-9lu  | %5d |",
 			"SID: ", stream_tracker.stream[sid].data->sid,
 			"PID: ", stream_tracker.stream[sid].data->pid,
@@ -53,10 +53,12 @@ void bc_update_stream_data(int sid)
 
 void bc_update_stream(int sid, enum position pos, int cmd)
 {
+	int index;
+	index = bc_cmd_index(cmd);
+
 	if(!stream_tracker.stream[sid].data)
 		return;
 
-	// index = bc_get_stream_num(cmd);
 	switch(pos)
 	{
 		case ENTER:
@@ -65,7 +67,7 @@ void bc_update_stream(int sid, enum position pos, int cmd)
 			break;
 		case EXIT:
 			clock_gettime(CLOCK_REALTIME, &stream_tracker.stream[sid].data->tdone);
-			bc_update_stream_data(sid);
+			bc_update_stream_data(sid, index);
 			break;
 	}
 }
@@ -91,6 +93,9 @@ void bc_allocate_stream(pid_t pid, int sid)
 	stream_tracker.stream[sid].data->type = 0;
 
 	// bc_update_stream_header(int sid);
+
+	bc_update_tracker(stream_tracker.stream[sid].mblock, 0,
+		"| %-50s %4d |", "Stream ID:", sid);
 }
 
 void bc_init_stream_tracker()
diff --git a/c/backchannel/src/bc_stream_tracker.h b/c/backchannel/src/bc_stream_tracker.h
index c0ce71b..206469b 100644
--- a/c/backchannel/src/bc_stream_tracker.h
+++ b/c/backchannel/src/bc_stream_tracker.h
@@ -33,7 +33,7 @@ struct stream_struct {
 
 struct stream_tracker {
 	tracker *tracker;
-	struct streamannel {
+	struct stream {
 		tracker_mblock *mblock;
 		struct stream_struct *data;
 		struct cmds *cmds;
@@ -45,7 +45,7 @@ void bc_deinit_stream_tracker(void);
 void bc_print_stream(int index, const char *fmt, ...);
 void bc_add_stream(void);
 void bc_update_stream(int sid, enum position pos, int cmd);
-void bc_update_stream_data(int index);
+void bc_update_stream_data(int sid, int index);
 void bc_update_stream_header(int sid);
 void bc_update_stream_cmd(int sid, enum position pos, int cmd, int status);
 void bc_allocate_stream(pid_t pid, int sid);
diff --git a/c/backchannel/src/bc_tracker.c b/c/backchannel/src/bc_tracker.c
index de1b2b9..4c59f70 100644
--- a/c/backchannel/src/bc_tracker.c
+++ b/c/backchannel/src/bc_tracker.c
@@ -31,6 +31,7 @@ tracker* bc_get_tracker(char* tracker_name)
 	}
 
 	t = bc_calloc(1, sizeof(tracker));
+	t->name = tracker_name;	
 	list_add(&trackers, &t->node);
 
 	return t;
@@ -39,7 +40,6 @@ tracker* bc_get_tracker(char* tracker_name)
 tracker* bc_allocate_tracker(char* tracker_name)
 {
 	tracker *t = bc_get_tracker(tracker_name);
-	t->name = tracker_name;
 
 	list_init(&t->mblocks);
 
@@ -50,21 +50,24 @@ tracker_mblock* bc_allocate_mblock(tracker *t, int lines)
 {
 	tracker_mblock *mblock = bc_calloc(1, sizeof(tracker_mblock));	
 	list_add(&t->mblocks, &mblock->node);
+	int s = 0;
 
 	mblock->lines = lines;
 	mblock->mmap_size = TRACKER_LINE_SIZE * lines;
 	
-	t->size = mblock->mmap_size;
 	t->fd = shm_open(t->name, O_RDWR | O_CREAT, 0666);
 	if ( t->fd < 0)
 		return NULL;
 
-	ftruncate(t->fd, t->size);
+	s = t->size;
+	ftruncate(t->fd, t->size + mblock->mmap_size + 1);
 	mblock->mmap = (char*) mmap(0, mblock->mmap_size,
 				PROT_READ | PROT_WRITE, MAP_SHARED,
-				t->fd, t->size - mblock->mmap_size);
-	if (mblock->mmap == MAP_FAILED)
-		mblock->mmap = NULL;
+				t->fd, t->size + 1);
+	// if (mblock->mmap == MAP_FAILED)
+	// 	mblock->mmap = NULL;
+
+	t->size += mblock->mmap_size;
 
 	close(t->fd);
 
@@ -73,14 +76,6 @@ tracker_mblock* bc_allocate_mblock(tracker *t, int lines)
 	return mblock;
 }
 
-void bc_deallocate_mblock(tracker_mblock* mblock)
-{
-	/* TBD */
-
-	// if(mblock)
-	// 	munmap(mblock, );
-}
-
 void bc_deallocate_tracker(tracker *t)
 {
 	list_node *node = &t->mblocks;
diff --git a/c/backchannel/src/bc_tracker.h b/c/backchannel/src/bc_tracker.h
index 6062696..6f1b0b8 100644
--- a/c/backchannel/src/bc_tracker.h
+++ b/c/backchannel/src/bc_tracker.h
@@ -2,6 +2,7 @@
 #define __BC_TRACKER__
 
 #include "bc_os_headers.h"
+#include "bc_heap_internal.h"
 #include "bc_list.h"
 
 #define TRACKER_LINE_SIZE 100
@@ -23,12 +24,12 @@ typedef struct struct_tracker {
 
 list_node trackers;
 
-void bc_init_tracker();
-void bc_deinit_tracker();
+void bc_init_tracker(void);
+void bc_deinit_tracker(void);
 tracker* bc_allocate_tracker(char* tracker_name);
 tracker_mblock* bc_allocate_mblock(tracker *t, int lines);
 void bc_deallocate_tracker(tracker *t);
-void bc_deallocate_mblock(tracker_mblock* mblock);
+void bc_deallocate_mblock(tracker_mblock*);
 int bc_update_tracker(tracker_mblock *mblock, int line, const char *fmt, ...);
 tracker* bc_get_tracker(char* tracker_name);
 
diff --git a/c/backchannel/test/main.c b/c/backchannel/test/main.c
index 7cb49a7..1deadd3 100644
--- a/c/backchannel/test/main.c
+++ b/c/backchannel/test/main.c
@@ -1,5 +1,6 @@
 #include "main.h"
 #include "../src/bc_cmd_tracker.h"
+#include "../src/bc_stream_tracker.h"
 #include "../src/bc_function_tracker.h"
 
 // static void full_write(int fd, const char *buf, size_t len)
@@ -92,15 +93,25 @@ int main(void)
 
     printf("DEBUG: PID: %d\n", getpid());
 
-	bc_update_cmd(ENTER, CMD1, 0);
-	bc_update_cmd(EXIT, CMD1, 0);
-	bc_update_cmd(ENTER, CMD2, 0);
+	bc_allocate_stream(getpid(), 1);
+	bc_allocate_stream(getpid(), 2);
+
+	bc_update_stream_cmd(2, ENTER, CMD1, 0);
+	bc_update_stream_cmd(2, EXIT, CMD1, 0);
+	
+	bc_update_stream_cmd(2, ENTER, CMD2, 0);
+	bc_update_stream_cmd(2, EXIT, CMD2, 0);
+	
+	bc_update_stream_cmd(1, ENTER, CMD2, 0);
 	function_stream.level = 0;
 	function_stream.level_enabled = 1;
 	function_stream.cond = ENABLE_LEVEL;
-	bc_update_cmd(EXIT, CMD2, -1);
+	bc_update_stream_cmd(1, EXIT, CMD2, -1);
 	function_stream.cond = DISABLE;
 
+	bc_update_stream_cmd(1, ENTER, CMD1, 0);
+	bc_update_stream_cmd(1, EXIT, CMD1, -1);
+
     // while(1);
     return 0;
 }
\ No newline at end of file
