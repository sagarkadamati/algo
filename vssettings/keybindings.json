[
    {
        "key":  "ctrl+p",
        "command":  "-workbench.action.quickOpen"
    },
    {
        "key":  "ctrl+n",
        "command":  "-workbench.action.files.newUntitledFile"
    },
    {
        "key":  "ctrl+f",
        "command":  "-workbench.action.terminal.focusFindWidget"
    },
    {
        "key":  "ctrl+f",
        "command":  "-actions.find"
    },
    {
        "key":  "ctrl+b",
        "command":  "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key":  "ctrl+shift+n",
        "command":  "-workbench.action.newWindow",
        "when":  "editorTextFocus"
    },
    {
        "key":  "ctrl+e",
        "command":  "-workbench.action.quickOpen"
    },
    {
        "key":  "ctrl+shift+b",
        "command":  "-workbench.action.tasks.build"
    },
    {
        "key":  "ctrl+shift+e",
        "command":  "-workbench.view.explorer"
    },
    {
        "key":  "ctrl+shift+w",
        "command":  "-workbench.action.closeWindow"
    },
    {
        "key":  "ctrl+k f",
        "command":  "-workbench.action.closeFolder"
    },
    {
        "key":  "ctrl+shift+t",
        "command":  "-workbench.action.reopenClosedEditor"
    },
    {
        "key":  "ctrl+h",
        "command":  "-editor.action.startFindReplaceAction"
    },
    {
        "key":  "ctrl+a",
        "command":  "-editor.action.selectAll"
    },
    {
        "key":  "ctrl+g",
        "command":  "-workbench.action.gotoLine"
    },
    {
        "key":  "ctrl+k ctrl+h",
        "command":  "-workbench.action.output.toggleOutput"
    },
    {
        "key":  "ctrl+j",
        "command":  "-workbench.action.togglePanel"
    },
    {
        "key":  "ctrl+shift+l",
        "command":  "workbench.action.focusSideBar",
        "when":  "editorTextFocus"
    },
    {
        "key":  "ctrl+shift+l",
        "command":  "workbench.action.toggleSidebarVisibility",
        "when":  "!editorTextFocus"
    },
    {
        "key":  "ctrl+shift+h",
        "command":  "workbench.action.focusFirstEditorGroup",
        "when":  "explorerViewletFocus"
    },
    {
        "key":  "ctrl+shift+h",
        "command":  "workbench.action.toggleSidebarVisibility",
        "when":  "!explorerViewletFocus"
    },
    {
        "key":  "ctrl+; ctrl+;",
        "command":  "closeFindWidget",
        "when":  "editorFocus \u0026\u0026 findWidgetVisible"
    },
    {
        "key":  "ctrl+; ctrl+;",
        "command":  "hideSuggestWidget",
        "when":  "editorTextFocus \u0026\u0026 suggestWidgetVisible"
    },
    {
        "key":  "ctrl+; ctrl+;",
        "command":  "workbench.action.closeQuickOpen",
        "when":  "inQuickOpen"
    },
    {
        "key":  "ctrl+f",
        "command":  "cursorRight",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+b",
        "command":  "cursorLeft",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+n",
        "command":  "cursorDown",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+p",
        "command":  "cursorUp",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+alt+f",
        "command":  "cursorWordStartRight",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+alt+b",
        "command":  "cursorWordStartLeft",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+alt+n",
        "command":  "cursorPageDown",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+alt+p",
        "command":  "cursorPageUp",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+e",
        "command":  "cursorLineEnd",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+a",
        "command":  "cursorLineStart",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+i",
        "command":  "cursorHome",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+; ctrl+e",
        "command":  "cursorBottom",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+; ctrl+b",
        "command":  "cursorTop",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+shift+f",
        "command":  "cursorRightSelect",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+shift+b",
        "command":  "cursorLeftSelect",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+shift+n",
        "command":  "cursorDownSelect",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+shift+p",
        "command":  "cursorUpSelect",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+shift+alt+f",
        "command":  "cursorWordStartRightSelect",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+shift+alt+b",
        "command":  "cursorWordStartLeftSelect",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+shift+alt+n",
        "command":  "cursorPageDownSelect",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+shift+alt+p",
        "command":  "cursorPageUpSelect",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+shift+e",
        "command":  "cursorEndSelect",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+shift+a",
        "command":  "cursorHomeSelect",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+shift+; ctrl+shift+e",
        "command":  "cursorBottomSelect",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+shift+; ctrl+shift+b",
        "command":  "cursorTopSelect",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+d",
        "command":  "deleteRight",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+alt+d",
        "command":  "deleteWordRight",
        "when":  "textInputFocus"
    },
    {
        "key":  "ctrl+; f",
        "command":  "actions.find",
        "when":  "editorTextFocus"
    },
    {
        "key":  "ctrl+; r",
        "command":  "editor.action.startFindReplaceAction",
        "when":  "editorTextFocus"
    },
    {
        "key":  "ctrl+; n",
        "command":  "explorer.newFile",
        "when":  "editorTextFocus"
    },
    {
        "key":  "ctrl+alt+v",
        "command":  "workbench.action.toggleCenteredLayout",
        "when":  "editorTextFocus"
    },
    {
        "key":  "alt+o",
        "command":  "markdown.showPreview",
        "when":  "editorTextFocus \u0026\u0026 editorLangId == \u0027markdown\u0027"
    },
    {
        "key":  "ctrl+; ctrl+w",
        "command":  "editor.action.toggleRenderWhitespace"
    },
    {
        "key":  "ctrl+h",
        "command":  "workbench.action.moveEditorToLeftGroup"
    },
    {
        "key":  "ctrl+l",
        "command":  "workbench.action.moveEditorToRightGroup"
    },
    {
        "key":  "ctrl+; ctrl+h",
        "command":  "workbench.action.focusFirstEditorGroup"
    },
    {
        "key":  "ctrl+; ctrl+l",
        "command":  "workbench.action.focusSecondEditorGroup"
    },
    {
        "key":  "ctrl+k ctrl+k",
        "command":  "workbench.action.keepEditor"
    },
    {
        "key":  "alt+n",
        "command":  "workbench.action.nextEditorInGroup"
    },
    {
        "key":  "alt+p",
        "command":  "workbench.action.previousEditorInGroup"
    },
    {
        "key":  "alt+u",
        "command":  "editor.action.transformToUppercase"
    },
    {
        "key":  "alt+l",
        "command":  "editor.action.transformToLowercase"
    },
    {
        "key":  "ctrl+o",
        "command":  "workbench.action.quickOpen"
    },
    {
        "key":  "ctrl+shift+p",
        "command":  "editor.action.diffReview.prev",
        "when":  "isInDiffEditor"
    },
    {
        "key":  "ctrl+shift+n",
        "command":  "editor.action.diffReview.next",
        "when":  "isInDiffEditor"
    },
    {
        "key":  "ctrl+shift+o",
        "command":  "workbench.action.files.openFile"
    },
    {
        "key":  "ctrl+; shift+r",
        "command":  "workbench.action.files.revert"
    },
    {
        "key":  "ctrl+shift+l",
        "command":  "breadcrumbs.focusNext",
        "when":  "breadcrumbsActive \u0026\u0026 breadcrumbsVisible"
    },
    {
        "key":  "ctrl+shift+h",
        "command":  "breadcrumbs.focusPrevious",
        "when":  "breadcrumbsActive \u0026\u0026 breadcrumbsVisible"
    },
    {
        "key":  "ctrl+oem_1 ctrl+oem_1",
        "command":  "breadcrumbs.selectEditor",
        "when":  "breadcrumbsActive \u0026\u0026 breadcrumbsVisible"
    },
    {
        "key":  "ctrl+; ctrl+s",
        "command":  "C_Cpp.SwitchHeaderSource",
        "when":  "editorTextFocus \u0026\u0026 editorLangId == \u0027cpp\u0027"
    },
    {
        "key":  "ctrl+; ctrl+s",
        "command":  "C_Cpp.SwitchHeaderSource",
        "when":  "editorTextFocus \u0026\u0026 editorLangId == \u0027c\u0027"
    },
    {
        "key":  "ctrl+; g",
        "command":  "workbench.action.gotoLine",
        "when":  "editorFocus"
    },
    {
        "key":  "ctrl+; /",
        "command":  "workbench.action.gotoSymbol",
        "when":  "editorTextFocus"
    },
    {
        "key":  "ctrl+; i",
        "command":  "editor.action.goToDeclaration",
        "when":  "editorHasDefinitionProvider \u0026\u0026 editorTextFocus \u0026\u0026 !isInEmbeddedEditor"
    },
    {
        "key":  "ctrl+; shift+i",
        "command":  "editor.action.goToImplementation",
        "when":  "editorHasImplementationProvider \u0026\u0026 editorTextFocus \u0026\u0026 !isInEmbeddedEditor"
    },
    {
        "key":  "ctrl+; d",
        "command":  "C_Cpp.GoToDeclaration",
        "when":  "editorTextFocus \u0026\u0026 editorLangId == \u0027cpp\u0027"
    },
    {
        "key":  "ctrl+; d",
        "command":  "C_Cpp.GoToDeclaration",
        "when":  "editorTextFocus \u0026\u0026 editorLangId == \u0027c\u0027"
    },
    {
        "key":  "ctrl+; shift+d",
        "command":  "C_Cpp.PeekDeclaration",
        "when":  "editorTextFocus \u0026\u0026 editorLangId == \u0027cpp\u0027"
    },
    {
        "key":  "ctrl+; shift+d",
        "command":  "C_Cpp.PeekDeclaration",
        "when":  "editorTextFocus \u0026\u0026 editorLangId == \u0027c\u0027"
    },
    {
        "key":  "ctrl+j",
        "command":  "workbench.action.togglePanel"
    },
    {
        "key":  "ctrl+shift+j",
        "command":  "workbench.action.togglePanel"
    },
    {
        "key":  "alt+shift+a",
        "command":  "workbench.action.toggleActivityBarVisibility"
    },
    {
        "key":  "ctrl+m",
        "command":  "workbench.action.toggleMaximizedPanel",
        "when":  "terminalFocus"
    },
    {
        "key":  "ctrl+; p",
        "command":  "workbench.action.showCommands"
    },
    {
        "key":  "alt+shift+t",
        "command":  "workbench.action.toggleTabsVisibility"
    },
    {
        "key":  "alt+shift+s",
        "command":  "workbench.action.toggleStatusbarVisibility"
    },
    {
        "key":  "ctrl+; ctrl+s",
        "command":  "workbench.action.previousEditorInGroup",
        "when":  "webviewEditorFocus"
    },
    {
        "key":  "ctrl+p",
        "command":  "workbench.action.interactivePlayground.pageUp",
        "when":  "webviewEditorFocus"
    },
    {
        "key":  "ctrl+n",
        "command":  "workbench.action.interactivePlayground.pageDown",
        "when":  "webviewEditorFocus"
    },
    {
        "key":  "ctrl+; /",
        "command":  "workbench.action.gotoSymbol",
        "when":  "webviewEditorFocus"
    },
    {
        "key":  "ctrl+i",
        "command":  "settings.action.search",
        "when":  "inSettingsEditor"
    },
    {
        "key":  "ctrl+; f",
        "command":  "settings.action.focusSettingsFile",
        "when":  "inSettingsEditor"
    },
    {
        "key":  "ctrl+i",
        "command":  "keybindings.editor.searchKeybindings",
        "when":  "inKeybindings"
    },
    {
        "key":  "ctrl+n",
        "command":  "keybindings.editor.focusKeybindings",
        "when":  "inKeybindings \u0026\u0026 inKeybindingsSearch"
    },
    {
        "key":  "ctrl+shift+c",
        "command":  "workbench.action.tasks.runTask",
        "args":  "build"
    },
    {
        "key":  "ctrl+shift+r",
        "command":  "workbench.action.tasks.runTask",
        "args":  "run"
    },
    {
        "key":  "ctrl+shift+n",
        "command":  "workbench.action.terminal.focusNext",
        "when":  "terminalFocus"
    },
    {
        "key":  "ctrl+shift+p",
        "command":  "workbench.action.terminal.focusPrevious",
        "when":  "terminalFocus"
    },
    {
        "key":  "ctrl+; n",
        "command":  "explorer.newFile",
        "when":  "explorerViewletFocus"
    },
    {
        "key":  "ctrl+; ctrl+n",
        "command":  "explorer.newFolder",
        "when":  "explorerViewletFocus"
    },
    {
        "key":  "ctrl+c",
        "command":  "filesExplorer.copy",
        "when":  "explorerViewletFocus"
    },
    {
        "key":  "ctrl+v",
        "command":  "filesExplorer.paste",
        "when":  "explorerViewletFocus"
    },
    {
        "key":  "ctrl+; d",
        "command":  "deleteFile",
        "when":  "explorerViewletFocus"
    },
    {
        "key":  "ctrl+; c",
        "command":  "workbench.files.action.collapseExplorerFolders",
        "when":  "explorerViewletFocus"
    },
    {
        "key":  "ctrl+; r",
        "command":  "workbench.files.action.refreshFilesExplorer",
        "when":  "explorerViewletFocus"
    },
    {
        "key":  "ctrl+n",
        "command":  "list.focusDown",
        "when":  "listFocus \u0026\u0026 !inputFocus"
    },
    {
        "key":  "ctrl+p",
        "command":  "list.focusUp",
        "when":  "listFocus \u0026\u0026 !inputFocus"
    },
    {
        "key":  "ctrl+alt+n",
        "command":  "list.focusPageDown",
        "when":  "listFocus \u0026\u0026 !inputFocus"
    },
    {
        "key":  "ctrl+alt+p",
        "command":  "list.focusPageUp",
        "when":  "listFocus \u0026\u0026 !inputFocus"
    },
    {
        "key":  "ctrl+h",
        "command":  "list.collapse",
        "when":  "listFocus \u0026\u0026 !inputFocus"
    },
    {
        "key":  "ctrl+l",
        "command":  "list.toggleExpand",
        "when":  "listFocus \u0026\u0026 !inputFocus"
    },
    {
        "key":  "ctrl+; ctrl+e",
        "command":  "list.focusLast",
        "when":  "listFocus \u0026\u0026 !inputFocus"
    },
    {
        "key":  "ctrl+; ctrl+b",
        "command":  "list.focusFirst",
        "when":  "listFocus \u0026\u0026 !inputFocus"
    },
    {
        "key":  "ctrl+; m",
        "command":  "workbench.action.joinTwoGroups",
        "when":  "editorTextFocus"
    },
    {
        "key":  "alt+l",
        "command":  "workbench.action.openNextRecentlyUsedEditor",
        "when":  "editorTextFocus"
    },
    {
        "key":  "ctrl+n",
        "command":  "list.focusFirst",
        "when":  "inputFocus \u0026\u0026 searchViewletVisible \u0026\u0026 !editorTextFocus"
    },
    {
        "key":  "ctrl+; shift+f",
        "command":  "workbench.view.search"
    },
    {
        "key":  "ctrl+; shift+r",
        "command":  "workbench.action.replaceInFiles"
    },
    {
        "key":  "ctrl+c",
        "command":  "search.action.collapseSearchResults",
        "when":  "searchViewletVisible \u0026\u0026 !editorTextFocus"
    },
    {
        "key":  "ctrl+shift+c",
        "command":  "search.action.clearSearchResults",
        "when":  "searchViewletVisible \u0026\u0026 !editorTextFocus"
    },
    {
        "key":  "ctrl+i",
        "command":  "workbench.view.search",
        "when":  "searchViewletVisible \u0026\u0026 !editorTextFocus \u0026\u0026 !searchInputBoxFocus"
    },
    {
        "key":  "ctrl+n",
        "command":  "editor.action.nextMatchFindAction",
        "when":  "editorFocus \u0026\u0026 findWidgetVisible"
    },
    {
        "key":  "ctrl+p",
        "command":  "editor.action.previousMatchFindAction",
        "when":  "editorFocus \u0026\u0026 findWidgetVisible"
    },
    {
        "key":  "ctrl+g ctrl+c",
        "command":  "workbench.view.scm"
    },
    {
        "key":  "ctrl+g r",
        "command":  "git.refresh"
    },
    {
        "key":  "ctrl+g p",
        "command":  "git.pull"
    },
    {
        "key":  "ctrl+g shift+p",
        "command":  "git.push"
    },
    {
        "key":  "ctrl+g s",
        "command":  "git.stage",
        "when":  "editorFocus"
    },
    {
        "key":  "ctrl+g shift+s",
        "command":  "git.stageAll",
        "when":  "editorFocus"
    },
    {
        "key":  "ctrl+g u",
        "command":  "git.unstage",
        "when":  "editorFocus"
    },
    {
        "key":  "ctrl+g shift+u",
        "command":  "git.unstageAll",
        "when":  "editorFocus"
    },
    {
        "key":  "ctrl+g shift+c",
        "command":  "git.commitAllSigned",
        "when":  "editorFocus"
    },
    {
        "key":  "ctrl+g a",
        "command":  "git.commitStagedAmend",
        "when":  "editorFocus"
    },
    {
        "key":  "ctrl+g shift+a",
        "command":  "git.commitAllAmend",
        "when":  "editorFocus"
    },
    {
        "key":  "ctrl+g b",
        "command":  "gitlens.toggleFileBlame",
        "when":  "editorTextFocus \u0026\u0026 gitlens:activeIsBlameable"
    },
    {
        "key":  "ctrl+g i",
        "command":  "gitlens.showQuickCommitFileDetails",
        "when":  "editorTextFocus \u0026\u0026 gitlens:enabled"
    },
    {
        "key":  "ctrl+g ctrl+s",
        "command":  "gitlens.showQuickRepoStatus",
        "when":  "gitlens:enabled"
    },
    {
        "key":  "ctrl+g d",
        "command":  "gitlens.diffWithPrevious",
        "when":  "editorTextFocus \u0026\u0026 gitlens:activeIsTracked"
    },
    {
        "key":  "ctrl+g l",
        "command":  "gitlens.toggleLineBlame",
        "when":  "editorTextFocus \u0026\u0026 gitlens:canToggleCodeLens \u0026\u0026 gitlens:enabled"
    },
    {
        "key":  "ctrl+g -",
        "command":  "gitlens.showLastQuickPick",
        "when":  "gitlens:enabled"
    },
    {
        "key":  "ctrl+g h",
        "command":  "gitlens.showQuickFileHistory",
        "when":  "gitlens:enabled"
    },
    {
        "key":  "ctrl+g shift+h",
        "command":  "gitlens.showQuickRepoHistory",
        "when":  "gitlens:enabled"
    },
    {
        "key":  "ctrl+g .",
        "command":  "gitlens.diffWithNext",
        "when":  "editorTextFocus \u0026\u0026 gitlens:activeIsTracked"
    },
    {
        "key":  "ctrl+g shift+,",
        "command":  "gitlens.diffLineWithPrevious",
        "when":  "editorTextFocus \u0026\u0026 gitlens:activeIsTracked"
    },
    {
        "key":  "ctrl+g w",
        "command":  "gitlens.diffLineWithWorking",
        "when":  "editorTextFocus \u0026\u0026 gitlens:activeIsTracked"
    },
    {
        "key":  "ctrl+g shift+w",
        "command":  "gitlens.diffWithWorking",
        "when":  "editorTextFocus \u0026\u0026 gitlens:activeIsTracked"
    },
    {
        "key":  "ctrl+g /",
        "command":  "gitlens.views.search:gitlens.focus",
        "when":  "gitlens:enabled"
    },
    {
        "key":  "ctrl+g c",
        "command":  "gitlens.views.compare:gitlens.focus",
        "when":  "gitlens:enabled"
    },
    {
        "key":  "ctrl+g f",
        "command":  "gitlens.views.fileHistory:gitlens.focus",
        "when":  "gitlens:enabled"
    },
    {
        "key":  "ctrl+g r",
        "command":  "gitlens.views.repositories:gitlens.focus",
        "when":  "gitlens:enabled"
    },
    {
        "key":  "ctrl+g shift+r",
        "command":  "gitlens.views.repositories.refresh",
        "when":  "gitlens:enabled"
    },
    {
        "key":  "ctrl+g shift+c",
        "command":  "gitlens.views.compare:gitlens.focus",
        "when":  "gitlens:enabled"
    },
    {
        "key":  "ctrl+g ctrl+shift+c",
        "command":  "git.cleanAll",
        "when":  "editorTextFocus"
    },
    {
        "key":  "ctrl+j i",
        "command":  "jira-plugin.setWorkingIssueCommand"
    },
    {
        "key":  "ctrl+j shift+i",
        "command":  "jira-plugin.insertWorkingIssueComment"
    },
    {
        "key":  "ctrl+j p",
        "command":  "jira-plugin.setWorkingProjectCommand"
    },
    {
        "key":  "ctrl+j c",
        "command":  "jira-plugin.issueAddCommentCommand"
    },
    {
        "key":  "ctrl+j oem_2",
        "command":  "jira-plugin.favouritesFilters"
    },
    {
        "key":  "ctrl+j a",
        "command":  "jira-plugin.changeIssueAssigneeCommand"
    },
    {
        "key":  "ctrl+j s",
        "command":  "jira-plugin.changeIssueStatusCommand"
    },
    {
        "key":  "ctrl+j r",
        "command":  "jira-plugin.refresh"
    },
    {
        "key":  "ctrl+j l",
        "command":  "jira-plugin.issueAddWorklogCommand"
    },
    {
        "key":  "ctrl+j o",
        "command":  "jira-plugin.openIssueCommand"
    },
    {
        "key":  "ctrl+n",
        "command":  "workbench.action.quickOpenNavigateNext",
        "when":  "inQuickOpen"
    },
    {
        "key":  "ctrl+n",
        "command":  "workbench.action.quickOpenNavigateNextInFilePicker",
        "when":  "inQuickOpen \u0026\u0026 inFilesPicker"
    },
    {
        "key":  "ctrl+n",
        "command":  "workbench.action.quickOpenNavigateNextInEditorPicker",
        "when":  "inQuickOpen \u0026\u0026 inEditorsPicker"
    },
    {
        "key":  "ctrl+n",
        "command":  "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
        "when":  "inQuickOpen \u0026\u0026 inRecentFilesPicker"
    },
    {
        "key":  "ctrl+p",
        "command":  "workbench.action.quickOpenNavigatePrevious",
        "when":  "inQuickOpen"
    },
    {
        "key":  "ctrl+p",
        "command":  "workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when":  "inQuickOpen \u0026\u0026 inEditorsPicker"
    },
    {
        "key":  "ctrl+p",
        "command":  "workbench.action.quickOpenNavigatePreviousInFilePicker",
        "when":  "inQuickOpen \u0026\u0026 inFilesPicker"
    },
    {
        "key":  "ctrl+p",
        "command":  "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
        "when":  "inQuickOpen \u0026\u0026 inRecentFilesPicker"
    },
    {
        "key":  "alt+f",
        "command":  "actions.find",
        "when":  "editorTextFocus"
    },
    {
        "key":  "alt+r",
        "command":  "editor.action.startFindReplaceAction",
        "when":  "editorTextFocus"
    },
    {
        "key":  "ralt+f",
        "command":  "actions.find",
        "when":  "editorTextFocus"
    },
    {
        "key":  "ralt+r",
        "command":  "editor.action.startFindReplaceAction",
        "when":  "editorTextFocus"
    },
    {
        "key":  "ctrl+n",
        "command":  "selectNextSuggestion",
        "when":  "editorTextFocus \u0026\u0026 suggestWidgetVisible"
    },
    {
        "key":  "ctrl+p",
        "command":  "selectPrevSuggestion",
        "when":  "editorTextFocus \u0026\u0026 suggestWidgetVisible"
    }
]
